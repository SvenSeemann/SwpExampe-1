// Generated by CoffeeScript 1.8.0
(function() {
  var debug, messaging;

  debug = true;

  messaging = (function() {
    var Message, Receiver, add_messages, check_messages, date_from_received, get_receivers, messages, new_form, receivers, refresh_receivers, send_message;

    date_from_received = function(date) {
      return new Date(date.year, date.monthValue - 1, date.dayOfMonth, date.hour, date.minute, date.second);
    };

    messages = {
      thing: $("#messages").children('tbody'),
      array: [],
      add_new: function(message) {
        this.array.push(message);
        return this.thing.append(this.templated(message));
      },
      templated: function(message) {
        return '<tr class="highlight"> <td class="message-sender">' + message.sender.firstname + message.sender.lastname + '</td> <td class="message-date">[' + message.dateReceived.toString() + ']</td> <td class="message-separator" style="text-align: center;">:</td> <td class="message-message">' + message.message_content + '</td> </tr>';
      },
      contains: function(message) {
        var item, _i, _len, _ref;
        _ref = this.array;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.id === message.id) {
            return true;
          }
        }
        return false;
      }
    };

    Message = (function() {
      function Message(message_content, dateReceived, sender, id) {
        this.message_content = message_content;
        this.sender = sender;
        this.id = id;
        this.dateReceived = date_from_received(dateReceived);
      }

      return Message;

    })();

    add_messages = function(data) {
      var message, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        message = data[_i];
        message = new Message(message.message, message.date, message.sender, message.id);
        if (!messages.contain(message)) {
          _results.push(messages.add_new(message));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    check_messages = function() {
      return $.ajax({
        type: "POST",
        cache: false,
        url: debug ? '/messaging/test/get' : '/messaging/get',
        data: {
          last: messages.array.length === 0 ? new Date(1000, 0).toUTCString() : messages.array[messages.array.length - 1].dateReceived.toUTCString()
        },
        success: function(data) {
          if (data.length > 0) {
            messages.message_thing.children('.highlight').removeClass('highlight');
            return add_messages(data);
          }
        }
      });
    };

    send_message = function(e, form) {
      e.preventDefault();
      form = $(form);
      console.log(form);
      return $.ajax({
        type: "POST",
        cache: false,
        url: form.attr('action'),
        data: form.serialize(),
        success: function(data) {
          return e.target.reset();
        }
      });
    };

    new_form = function(receiver) {
      var form;
      form = $('<form id="message-forms" action="/messaging/test/send" method="post"> <input type="hidden" value="' + receiver + '" name="recipient"> <label for="message-content">Your Message</label> <textarea name="message" id="message-content"></textarea> <button type="Submit" value="submit">Submit</button> </form>');
      form.submit((function(_this) {
        return function(e) {
          return send_message(e);
        };
      })(this));
      return $('#message-forms').html(form);
    };

    Receiver = (function() {
      function Receiver(firstname, lastname, id) {
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
      }

      return Receiver;

    })();

    receivers = {
      representation: $("#recipients"),
      array: [],
      add_all: function(recipients) {
        var r, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = recipients.length; _i < _len; _i++) {
          r = recipients[_i];
          _results.push(this.add(r));
        }
        return _results;
      },
      add: function(recipient) {
        var rec;
        rec = new Receiver(recipient.firstname, recipient.lastname, recipient.id.identifier);
        if (!this.contains(rec)) {
          this.array.push(rec);
          return this.representation.append('<a class="receiver" onclick="messaging.new_form(\'' + rec.id + '\')">' + rec.firstname + rec.lastname + '</a>');
        }
      },
      contains: function(recipient) {
        var r, _i, _len, _ref;
        _ref = this.array;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (r.id === recipient.id) {
            return true;
          }
        }
        return false;
      }
    };

    refresh_receivers = function() {
      return get_receivers(function(data) {
        return receivers.add_all(data);
      });
    };

    get_receivers = function(callback) {
      return $.ajax({
        type: "POST",
        cache: false,
        url: debug ? '/messaging/test/get/receivers' : '/messaging/get/receivers',
        success: callback
      });
    };

    function messaging() {
      $('form#message-form').submit(function(e) {
        return send_message(e, this);
      });
      $('#refresh-messages').on('click', function() {
        return check_messages();
      });
      $('#refresh-receivers').on('click', function() {
        return refresh_receivers();
      });
      refresh_receivers();
      check_messages();
    }

    return messaging;

  })();

  $(document).ready(function() {
    return messaging = new messaging();
  });

}).call(this);
